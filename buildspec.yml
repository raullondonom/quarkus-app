version: 0.2

env:
  variables:
    IMAGE_NAME: quarkus-app
    DOCKERFILE_PATH: src/main/docker/Dockerfile.jvm
    AWS_REGION: us-east-1
    ECR_REPO_URL: 311964230334.dkr.ecr.us-east-1.amazonaws.com
    EC2_INSTANCE_ID: i-0e0d5c37103a5f81c

phases:
  install:
    runtime-versions:
      java: corretto21
    commands:
      - echo "🔧 Instalando dependencias del sistema (git y docker si faltan)..."
      - |
        if ! command -v git &> /dev/null; then
          echo "Instalando Git..."
          sudo dnf install -y git
        else
          echo "Git ya está instalado"
        fi
      - |
        if ! command -v docker &> /dev/null; then
          echo "Instalando Docker..."
          sudo dnf install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
        else
          echo "Docker ya está instalado"
        fi
      - echo "✅ Versiones instaladas:"
      - git --version
      - docker --version

  pre_build:
    commands:
      - echo "⚙️ Compilando el proyecto..."
      - chmod +x ./mvnw
      - ./mvnw clean package -DskipTests
      - echo "🔐 Logueando en Amazon ECR..."
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL

  build:
    commands:
      - echo "🐳 Construyendo imagen Docker..."
      - docker build -f $DOCKERFILE_PATH -t $IMAGE_NAME .
      - docker tag $IMAGE_NAME:latest $ECR_REPO_URL/$IMAGE_NAME:latest

  post_build:
    commands:
      - echo "📤 Subiendo imagen a ECR..."
      - docker push $ECR_REPO_URL/$IMAGE_NAME:latest
      - echo "🚀 Desplegando en EC2 con SSM..."
      - >
        aws ssm send-command 
        --document-name "AWS-RunShellScript" 
        --comment "Despliegue Quarkus desde CodeBuild" 
        --instance-ids "$EC2_INSTANCE_ID" 
        --region "$AWS_REGION" 
        --parameters commands="
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REPO_URL && 
          docker pull $ECR_REPO_URL/$IMAGE_NAME:latest && 
          docker stop $IMAGE_NAME || true && 
          docker rm $IMAGE_NAME || true && 
          docker run -d --name $IMAGE_NAME -p 8080:8080 $ECR_REPO_URL/$IMAGE_NAME:latest"
